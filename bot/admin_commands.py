from aiogram import types
from aiogram.filters import Command, CommandObject
from asgiref.sync import sync_to_async
from core.models import UserQuestProgress, PromoCode
from django.conf import settings

async def check_admin_group(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not message.chat.id == int(settings.ADMIN_GROUP_ID):
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return False
    return True

async def handle_approve(message: types.Message, command: CommandObject):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –∏–∑ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not await check_admin_group(message):
        return

    if not command.args:
        await message.reply("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n–ü—Ä–∏–º–µ—Ä: /approve 12345")
        return

    progress_id = command.args

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    get_progress = sync_to_async(lambda: UserQuestProgress.objects.select_related('user', 'quest').filter(id=progress_id).first())
    progress = await get_progress()

    if not progress:
        await message.reply(f"–û—à–∏–±–∫–∞: –ø—Ä–æ–≥—Ä–µ—Å—Å —Å ID {progress_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if progress.status != UserQuestProgress.Status.PENDING:
        await message.reply("–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        return

    # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
    get_promo = sync_to_async(lambda: PromoCode.objects.filter(
        quest=progress.quest,
        is_used=False
    ).first())
    promo_code = await get_promo()

    if not promo_code:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–≤–µ—Å—Ç–∞")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    @sync_to_async
    def update_progress():
        progress.status = UserQuestProgress.Status.APPROVED
        progress.promo_code = promo_code
        progress.save()
        promo_code.is_used = True
        promo_code.save()

    await update_progress()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.bot.send_message(
        progress.user.telegram_id,
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ \"{progress.quest.name}\" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
        f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code.code}"
    )

    await message.reply("‚úÖ –ö–≤–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø—Ä–æ–º–æ–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

async def handle_reject(message: types.Message, command: CommandObject):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –∏–∑ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not await check_admin_group(message):
        return

    if not command.args:
        await message.reply("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ø—Ä–∏—á–∏–Ω—É\n–ü—Ä–∏–º–µ—Ä: /reject 12345 —Ñ–æ—Ç–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–∏—é")
        return

    args = command.args.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
        return

    progress_id, reason = args

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    get_progress = sync_to_async(lambda: UserQuestProgress.objects.select_related('user', 'quest').filter(id=progress_id).first())
    progress = await get_progress()

    if not progress:
        await message.reply(f"–û—à–∏–±–∫–∞: –ø—Ä–æ–≥—Ä–µ—Å—Å —Å ID {progress_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if progress.status != UserQuestProgress.Status.PENDING:
        await message.reply("–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    @sync_to_async
    def update_progress():
        progress.status = UserQuestProgress.Status.REJECTED
        progress.admin_comment = reason
        progress.save()

    await update_progress()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.bot.send_message(
        progress.user.telegram_id,
        f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ \"{progress.quest.name}\" –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–≤–µ—Å—Ç –µ—â—ë —Ä–∞–∑."
    )

    await message.reply("‚ùå –ö–≤–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é") 