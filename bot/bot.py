import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from django.conf import settings
from core.models import User, Quest, UserQuestProgress
from dotenv import load_dotenv
from asgiref.sync import sync_to_async

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
from . import admin_commands

# –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(override=True)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
token = os.getenv('TELEGRAM_BOT_TOKEN')
print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {token}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –Ω–æ–≤—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
bot = Bot(
    token=token,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
dp.message.register(admin_commands.handle_approve, Command("approve"))
dp.message.register(admin_commands.handle_reject, Command("reject"))

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç")],
            [KeyboardButton(text="üéÅ –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")],
        ],
        resize_keyboard=True
    )
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    get_or_create = sync_to_async(User.objects.get_or_create)
    user, created = await get_or_create(
        telegram_id=message.from_user.id,
        defaults={
            'name': message.from_user.full_name,
        }
    )
    
    if not user.is_verified:
        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
            resize_keyboard=True
        )
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=contact_keyboard
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∫–≤–µ—Å—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )

@dp.message(lambda message: message.contact is not None)
async def handle_contact(message: types.Message):
    get_user = sync_to_async(User.objects.get)
    user = await get_user(telegram_id=message.from_user.id)
    user.phone_number = message.contact.phone_number
    user.is_verified = True
    save_user = sync_to_async(user.save)
    await save_user()
    
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–≤–µ—Å—Ç—ã.",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç")
async def get_quest(message: types.Message):
    get_user = sync_to_async(User.objects.get)
    user = await get_user(telegram_id=message.from_user.id)
    
    if not user.is_verified:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    
    get_quest = sync_to_async(lambda: Quest.objects.filter(
        is_active=True
    ).exclude(
        userquestprogress__user=user
    ).first())
    available_quest = await get_quest()
    
    if not available_quest:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
    await message.answer(
        f"üéØ –ö–≤–µ—Å—Ç: {available_quest.name}\n\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {available_quest.location}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{available_quest.description}\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ."
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
    logger.info(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–≤–µ—Å—Ç–∞: lat={available_quest.latitude}, lon={available_quest.longitude}")
    
    try:
        if available_quest.latitude and available_quest.longitude:
            await message.answer_location(
                latitude=float(available_quest.latitude),
                longitude=float(available_quest.longitude)
            )
            logger.info("–õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            logger.warning("–î–ª—è –∫–≤–µ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")

@dp.message(lambda message: message.text == "üéÅ –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
async def my_promocodes(message: types.Message):
    get_user = sync_to_async(User.objects.get)
    user = await get_user(telegram_id=message.from_user.id)
    
    get_completed_quests = sync_to_async(lambda: list(UserQuestProgress.objects.filter(
        user=user,
        status=UserQuestProgress.Status.APPROVED,
        promo_code__isnull=False
    ).select_related('quest', 'promo_code')))
    
    completed_quests = await get_completed_quests()
    
    if not completed_quests:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
        return
    
    promocodes_text = "–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n"
    for progress in completed_quests:
        promocodes_text += f"üéÅ –ö–≤–µ—Å—Ç: {progress.quest.name}\n"
        promocodes_text += f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: {progress.promo_code.code}\n\n"
    
    await message.answer(promocodes_text)

@dp.message(lambda message: message.photo is not None)
async def handle_photo(message: types.Message):
    get_user = sync_to_async(User.objects.get)
    user = await get_user(telegram_id=message.from_user.id)
    
    get_quest = sync_to_async(lambda: Quest.objects.filter(
        is_active=True
    ).exclude(
        userquestprogress__user=user
    ).first())
    active_quest = await get_quest()
    
    if not active_quest:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞.")
        return
    
    photo = message.photo[-1]
    file_id = photo.file_id
    
    create_progress = sync_to_async(UserQuestProgress.objects.create)
    progress = await create_progress(
        user=user,
        quest=active_quest,
        photo=file_id
    )
    
    await message.answer(
        "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await bot.send_photo(
        settings.ADMIN_GROUP_ID,
        photo=file_id,
        caption=(
            f"–ù–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}\n"
            f"üéØ –ö–≤–µ—Å—Ç: {active_quest.name}\n"
            f"üÜî ID –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {progress.id}\n\n"
            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            f"/approve {progress.id}\n\n"
            "–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n"
            f"/reject {progress.id} –ø—Ä–∏—á–∏–Ω–∞"
        )
    )

async def start_bot():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(handle_contact, lambda message: message.contact is not None)
    dp.message.register(get_quest, lambda message: message.text == "üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç")
    dp.message.register(my_promocodes, lambda message: message.text == "üéÅ –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
    dp.message.register(handle_photo, lambda message: message.photo is not None)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise 