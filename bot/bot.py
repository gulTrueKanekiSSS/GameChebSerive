import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from django.conf import settings
from core.models import User, Quest, UserQuestProgress
from core.models import Route, RouteQuest
from dotenv import load_dotenv
from asgiref.sync import sync_to_async
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
from . import admin_commands

class RouteBuilderStates(StatesGroup):
    waiting_for_name        = State()  # –∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    waiting_for_description = State()  # –∂–¥—É –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    waiting_for_add_point   = State()  # –≤—ã–±—Ä–∞—Ç—å: –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    waiting_for_quest_choice    = State()  # –∂–¥—É –≤—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤. –∫–≤–µ—Å—Ç–∞ –∏–ª–∏ /new
    waiting_for_new_quest_name  = State()  # –ø—Ä–∏ /new ‚Äî –∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞
    waiting_for_new_quest_desc  = State()  # –∂–¥—É –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞
    waiting_for_new_quest_loc   = State()  # –∂–¥—É –ª–æ–∫–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞
    waiting_for_hint_text       = State()  # –∂–¥—É –ø–æ–¥—Å–∫–∞–∑–∫—É –∫ —Ç–æ—á–∫–µ
    waiting_for_photo           = State()  # –∂–¥—É —Ñ–æ—Ç–æ –∏–ª–∏ /skip
    waiting_for_audio           = State()  # –∂–¥—É –∞—É–¥–∏–æ –∏–ª–∏ /skip
    confirm_point               = State()  # –∂–¥—É –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏
    finish_or_add_next          = State()  # –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Äî –∂–¥—É ¬´–ì–æ—Ç–æ–≤–æ¬ª –∏–ª–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª


# –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(override=True)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
token = os.getenv('TELEGRAM_BOT_TOKEN')
print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {token}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –Ω–æ–≤—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
bot = Bot(
    token=token,
    default=DefaultBotProperties(parse_mode="HTML")
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
dp.message.register(admin_commands.handle_approve, Command("approve"))
dp.message.register(admin_commands.handle_reject, Command("reject"))

@sync_to_async
def _sync_save_route(data):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: —Å–æ–∑–¥–∞—ë—Ç Route –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ RouteQuest.
    """
    # 1) —Å–æ–∑–¥–∞—ë–º –º–∞—Ä—à—Ä—É—Ç
    route = Route.objects.create(
        name=data['route_name'],
        description=data['route_description']
    )
    # 2) –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ —Å–æ–∑–¥–∞—ë–º RouteQuest
    for idx, pt in enumerate(data['points'], start=1):
        RouteQuest.objects.create(
            route=route,
            quest_id=pt['quest_id'],
            order=idx,
            hint_text=pt.get('hint_text', ''),
            photo=pt.get('photo_file'),
            audio=pt.get('audio_file'),
            latitude=pt.get('latitude'),
            longitude=pt.get('longitude'),
        )

async def save_route_to_db(data):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è FSM: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç data –∏–∑ state –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç.
    """
    await _sync_save_route(data)

def get_main_keyboard(user):
    buttons = [
        [KeyboardButton(text="üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç")],
        [KeyboardButton(text="üéÅ –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")],
    ]
    if user.is_route_builder:
        buttons.append([KeyboardButton(text="üõ†Ô∏è –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user, created = await sync_to_async(User.objects.get_or_create)(
        telegram_id=message.from_user.id,
        defaults={'name': message.from_user.full_name},
    )
    
    if not user.is_verified:
        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
            resize_keyboard=True
        )
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=contact_keyboard
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∫–≤–µ—Å—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard(user)
        )


@dp.message(lambda message: message.text == "üõ†Ô∏è –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
async def cmd_start_route_builder(message: types.Message, state: FSMContext):
    # 1) –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, _ = await sync_to_async(User.objects.get_or_create)(
        telegram_id=message.from_user.id,
        defaults={'name': message.from_user.full_name},
    )
    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –±–∏–ª–¥e—Ä
    if not user.is_route_builder:
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã.")

    # 3) –°—Ç–∞—Ä—Ç—É–µ–º FSM: –ø—Ä–æ—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await message.answer("üõ†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞:")
    await state.set_state(RouteBuilderStates.waiting_for_name)


@dp.message(RouteBuilderStates.waiting_for_name)
async def process_route_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSM
    await state.update_data(route_name=message.text)
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await message.answer("üõ†Ô∏è –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(RouteBuilderStates.waiting_for_description)


@dp.message(RouteBuilderStates.waiting_for_description)
async def process_route_description(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫
    await state.update_data(
        route_description=message.text,
        points=[]
    )
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É"), KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=kb
    )
    await state.set_state(RouteBuilderStates.waiting_for_add_point)

@dp.message(RouteBuilderStates.waiting_for_add_point)
async def process_add_point(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = message.text

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        if not data.get("points"):
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ –ë–î
        await save_route_to_db(data)
        await message.answer(
            f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç ¬´{data['route_name']}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–æ—á–µ–∫ –≤ –º–∞—Ä—à—Ä—É—Ç–µ: {len(data['points'])}."
        )
        await state.clear()  # –æ—á–∏—â–∞–µ–º FSM
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É":
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"), KeyboardButton(text="/new")],
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–≤–µ—Å—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞:",
            reply_markup=kb
        )
        await state.set_state(RouteBuilderStates.waiting_for_quest_choice)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ: ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –∏–ª–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ.")


@dp.message(RouteBuilderStates.waiting_for_quest_choice)
async def process_quest_choice(message: types.Message, state: FSMContext):
    text = message.text.strip()

    # 1) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
    if text.lower() == '/new':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞:")
        return await state.set_state(RouteBuilderStates.waiting_for_new_quest_name)

    # 2) –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–≤–µ—Å—Ç –ø–æ –ø–æ–ª–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    quest = await sync_to_async(Quest.objects.filter(name=text).first)()
    if not quest:
        return await message.answer(
            "‚ùå –ö–≤–µ—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /new."
        )

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π quest –≤ ¬´—Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–µ¬ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Å–∫–∞–∑–∫–µ
    await state.update_data(
        current_point={'quest_id': str(quest.id)}
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
    await state.set_state(RouteBuilderStates.waiting_for_hint_text)


@dp.message(RouteBuilderStates.waiting_for_new_quest_name)
async def process_set_quest_name(message: types.Message, state: FSMContext):
    await state.update_data(quest_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞")
    await state.set_state(RouteBuilderStates.waiting_for_new_quest_desc)


@dp.message(RouteBuilderStates.waiting_for_new_quest_desc)
async def process_set_quest_desc(message: types.Message, state: FSMContext):
    await state.update_data(quest_desc=message.text)
    await message.answer("")


@dp.message(lambda message: message.contact is not None)
async def handle_contact(message: types.Message):
    get_user = sync_to_async(User.objects.get)
    user = await get_user(telegram_id=message.from_user.id)
    user.phone_number = message.contact.phone_number
    user.is_verified = True
    save_user = sync_to_async(user.save)
    await save_user()
    
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–≤–µ—Å—Ç—ã.",
        reply_markup=get_main_keyboard(user)
    )

@dp.message(lambda message: message.text == "üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç")
async def get_quest(message: types.Message):
    get_user = sync_to_async(User.objects.get)
    user = await get_user(telegram_id=message.from_user.id)
    
    if not user.is_verified:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    
    get_quest = sync_to_async(lambda: Quest.objects.filter(
        is_active=True
    ).exclude(
        userquestprogress__user=user
    ).first())
    available_quest = await get_quest()
    
    if not available_quest:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
    await message.answer(
        f"üéØ –ö–≤–µ—Å—Ç: {available_quest.name}\n\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {available_quest.location}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{available_quest.description}\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ."
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
    logger.info(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–≤–µ—Å—Ç–∞: lat={available_quest.latitude}, lon={available_quest.longitude}")
    
    try:
        if available_quest.latitude and available_quest.longitude:
            await message.answer_location(
                latitude=float(available_quest.latitude),
                longitude=float(available_quest.longitude)
            )
            logger.info("–õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            logger.warning("–î–ª—è –∫–≤–µ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")

@dp.message(lambda message: message.text == "üéÅ –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
async def my_promocodes(message: types.Message):
    get_user = sync_to_async(User.objects.get)
    user = await get_user(telegram_id=message.from_user.id)
    
    get_completed_quests = sync_to_async(lambda: list(UserQuestProgress.objects.filter(
        user=user,
        status=UserQuestProgress.Status.APPROVED,
        promo_code__isnull=False
    ).select_related('quest', 'promo_code')))
    
    completed_quests = await get_completed_quests()
    
    if not completed_quests:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
        return
    
    promocodes_text = "–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n"
    for progress in completed_quests:
        promocodes_text += f"üéÅ –ö–≤–µ—Å—Ç: {progress.quest.name}\n"
        promocodes_text += f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: {progress.promo_code.code}\n\n"
    
    await message.answer(promocodes_text)

@dp.message(lambda message: message.photo is not None)
async def handle_photo(message: types.Message):
    get_user = sync_to_async(User.objects.get)
    user = await get_user(telegram_id=message.from_user.id)
    
    get_quest = sync_to_async(lambda: Quest.objects.filter(
        is_active=True
    ).exclude(
        userquestprogress__user=user
    ).first())
    active_quest = await get_quest()
    
    if not active_quest:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞.")
        return
    
    photo = message.photo[-1]
    file_id = photo.file_id
    
    create_progress = sync_to_async(UserQuestProgress.objects.create)
    progress = await create_progress(
        user=user,
        quest=active_quest,
        photo=file_id
    )
    
    await message.answer(
        "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await bot.send_photo(
        settings.ADMIN_GROUP_ID,
        photo=file_id,
        caption=(
            f"–ù–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}\n"
            f"üéØ –ö–≤–µ—Å—Ç: {active_quest.name}\n"
            f"üÜî ID –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {progress.id}\n\n"
            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            f"/approve {progress.id}\n\n"
            "–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n"
            f"/reject {progress.id} –ø—Ä–∏—á–∏–Ω–∞"
        )
    )

async def start_bot():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    dp.message.register(cmd_start_route_builder, lambda msg: msg.text == "üõ†Ô∏è –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
    dp.message.register(
        process_route_name,
        lambda msg: True,
        RouteBuilderStates.waiting_for_name
    )
    dp.message.register(
        process_route_description,
        lambda msg: True,
        RouteBuilderStates.waiting_for_description
    )
    dp.message.register(
        process_quest_choice,
        lambda msg: True,
        RouteBuilderStates.waiting_for_quest_choice
    )

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(handle_contact, lambda message: message.contact is not None)
    dp.message.register(get_quest, lambda message: message.text == "üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç")
    dp.message.register(my_promocodes, lambda message: message.text == "üéÅ –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
    dp.message.register(handle_photo, lambda message: message.photo is not None)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise 